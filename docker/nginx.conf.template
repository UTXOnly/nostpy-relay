server {
    listen 443 ssl;
    server_name ${DOMAIN};

    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp521r1:secp384r1;
    ssl_ciphers EECDH+AESGCM:EECDH+AES256;

    ssl_session_cache shared:TLS:2m;
    ssl_buffer_size 4k;

    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001];

    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload' always;
    keepalive_timeout 70;

    # WebSocket handling
    location / {

        # Handle WebSocket traffic by checking the `Upgrade` header
        if ($http_upgrade != "websocket") {
            # Non-WebSocket requests (standard HTTP requests) should go to FastAPI
            proxy_pass http://${DOCKER_SVC}:8000;  # FastAPI backend
        }


        proxy_pass http://${DOCKER_SVC}:${SVC_PORT};  # WebSocket backend

        # These headers are for WebSocket connections
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        # Standard headers for all requests
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_read_timeout 1d;
        proxy_send_timeout 1d;

    }


    location /nip86 {
        proxy_pass http://${DOCKER_SVC}:8000/nip86;  # FastAPI NIP-86 handler

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_read_timeout 1d;
        proxy_send_timeout 1d;
    }
}
